/*********************************************************************
 *
 *                  ZCL Alarm Header File
 *
 *********************************************************************
 * FileName        : ZCL_Alarm.h
 * Dependencies    :
 * Processor       : PIC18 / PIC24 / dsPIC33
 * Complier        : MCC18 v3.00 or higher
 *                   MCC30 v2.05 or higher
 * Company         : Microchip Technology, Inc.
 *
 * Software License Agreement
 *
 * Copyright © 2004-2007 Microchip Technology Inc.  All rights reserved.
 *
 * Microchip licenses to you the right to use, copy and distribute Software
 * only when embedded on a Microchip microcontroller or digital signal
 * controller and used with a Microchip radio frequency transceiver, which
 * are integrated into your product or third party product (pursuant to the
 * sublicense terms in the accompanying license agreement).  You may NOT
 * modify or create derivative works of the Software.
 *
 * If you intend to use this Software in the development of a product for
 * sale, you must be a member of the ZigBee Alliance.  For more information,
 * go to www.zigbee.org.
 *
 * You should refer to the license agreement accompanying this Software for
 * additional information regarding your rights and obligations.
 *
 * SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY
 * OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR
 * PURPOSE. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED
 * UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF
 * WARRANTY, OR OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR
 * EXPENSES INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT,
 * PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
 * THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER
 * SIMILAR COSTS.
 *
 *
 *
 * Author               Date    Comment
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 ********************************************************************/
#ifndef _ZCL_ALARM_H
#define _ZCL_ALARM_H

/*****************************************************************************
                                Includes
 *****************************************************************************/
 /* None */

/*****************************************************************************
                          Constants and Enumerations
 *****************************************************************************/
#define ZCL_ALARM_CLUSTER                       0x0009

/* Alarm Information Attribute Set */
#if (I_SUPPORT_OPTIONAL_ZCL_ATTRIBUTES == 0x01 )
    #define ZCL_ALARM_COUNT                     0x0000
#endif

/*enumerations for events for ALARM cluster*/
enum Alarm_Cluster_Events
{
    ZCL_Alarm_ResetAlarmEvent                   = 0x30,
    ZCL_Alarm_ResetAllAlarmsEvent               = 0x31,
    ZCL_Alarm_GetAlarmEvent                     = 0x32,
    ZCL_Alarm_ResetAlarmLogEvent                = 0x33,
    ZCL_Alarm_AlarmEvent                        = 0x34,
    ZCL_Alarm_GetAlarmResponseEvent             = 0x35
};
/*Commands generated by Server Side of the Alarm Cluster*/
enum Alarm_Server_Generated_Commands
{
    ZCL_AlarmCmd                                = 0x00,
    ZCL_GetAlarmResponseCmd                     = 0x01
};

/*Commands generated by Client Side of the Alarm Cluster*/
enum Alarm_Client_Generated_Commands
{
    ZCL_ResetAlarmCmd                           = 0x00,
    ZCL_ResetAllAlarmsCmd                       = 0x01,
    ZCL_GetAlarmCmd                             = 0x02,
    ZCL_ResetAlarmLogCmd                        = 0x03
};
/*****************************************************************************
                          Customizable Macros
 *****************************************************************************/
 /* None */

 /*****************************************************************************
                          Variable definitions
 *****************************************************************************/
 extern ROM ZCL_ClusterDefinition zcl_AlarmClusterServerDefinition;
 extern ROM ZCL_ClusterDefinition zcl_AlarmClusterClientDefinition;

 extern ROM ZCL_ClusterInfo zcl_AlarmClusterServerInfo;
 extern ROM ZCL_ClusterInfo zcl_AlarmClusterClientInfo;
 /*****************************************************************************
                            Data Structures
 *****************************************************************************/
/* Structure for holding ALARM cluster attributes */
typedef struct  _ZCL_AlarmClusterAttributes
{
#if I_SUPPORT_OPTIONAL_ZCL_ATTRIBUTES == 1
    WORD alarmCount;
#endif
} ZCL_AlarmClusterAttributes;

/*Structure for ResetAlarm Command payload*/
typedef struct __attribute__((packed,aligned(1))) _ALARM_ResetAlarm
{
    BYTE alarmCode;
    WORD clusterId;
} ALARM_ResetAlarm;
/*Structure for Alarm Command payload*/
typedef struct  __attribute__((packed,aligned(1))) _ALARM_Alarm
{
    BYTE alarmCode;
    WORD clusterId;
} ALARM_Alarm;

/*Structure for AlarmTable*/
typedef struct  __attribute__((packed,aligned(1))) _ALARM_AlarmTable
{
    BYTE status;
    BYTE alarmCode;
    WORD clusterId;
    DWORD timeStamp;
} ALARM_AlarmTable;

/*Structure for Alarm conditions Table*/
typedef struct __attribute__((packed,aligned(1))) _AlarmConditionsTable
{
   WORD clusterId;
   WORD attributeId;
   WORD thresholdAttributeId;
   WORD alarmMaskAttributeId;
   BYTE alarmCode;
   BYTE alarmMaskData;
   BYTE compareToMaxOrMinThreshold;
}AlarmConditionsTable;
  /*****************************************************************************
                          Function Prototypes
 *****************************************************************************/
 /******************************************************************************
 * Function:        BYTE ZCL_HandleAlarmClusterCommand
 *                  (
 *                      BYTE endPointId,
 *                      BYTE asduLength,
 *                      BYTE* pReceivedAsdu,
 *                      BYTE* pResponseAsduStartLocation,
 *                      ZCL_ActionHandler* pActionHandler,
 *                      ROM ZCL_ClusterInfo* pZCLClusterInfo
 *                  );
 *
 * PreCondition:    None
 *
 * Input:           endPointId  - EndPoint on which the Alarm Cluster command needs
 *                                 to be processed.
 *                  asduLength - Asdu Length of the recevied frame.
 *                  pReceivedAsdu - This point to the actual data received.
 *                                  This consists of ZCL header and Payload.
 *                  pZCLClusterInfo - Pointer pointing to the Alarm Cluster info
 *
 * Output:          pResponseAsduStartLocation - Pointer pointing to the start
 *                                               location of asdu for which the
 *                                               response frame needs to be created
 *                  pActionHandler -   This is used to notify the application that a
 *                                     response frame is generated or not.
 *                                     It also holds the information of the type event
 *                                     to be handled by the application and has the
 *                                     payload of the recevied data.
 * Return :         Returns the length of the response frame created
 * Side Effects:    None
 *
 * Overview:        This function is called when a Alarm Cluster command
 *                  is received.
 *                  This function process the Alarm Cluster commands and
 *                  notifies the application about the action to be taken.
 * Note:            None
 *****************************************************************************/
BYTE ZCL_HandleAlarmClusterCommand
(
    BYTE endPointId,
    BYTE asduLength,
    BYTE* pReceivedAsdu,
    BYTE* pResponseAsduStartLocation,
    ZCL_ActionHandler *pActionHandler,
    ROM ZCL_ClusterInfo *pZCLClusterInfo
);

/******************************************************************************
* Function:        void ZCL_Callback_CheckForAlarmCondition
*                  (
*                       BYTE endpointID,
*                       WORD attributeId,
*                       ROM ZCL_ClusterInfo *pZCLClusterInfo
*                  );
*
* PreCondition:    None
*
* Input:           endpointID - It points to source end point
*                  pZCLClusterInfo - It points to ClusterInfo
*                  attributeId - its attribute data needs to be checked with
*                  threshold value.
*
* Output:          None
*
* Return :         None
*
* Side Effects:    None
*
* Overview:        This function checks,the given attributeID data with its threshold
*                  value.
*                  If it's data exceeds the threshold value and corresponding alarm mask
*                  is enabled then we need to generate an alarm and corresponding
*                  alarm entry will be added in its alarm table.
* Note:            None
*****************************************************************************/
void ZCL_Callback_CheckForAlarmCondition
(
    BYTE endpointId,
    WORD attributeId,
    ROM ZCL_ClusterInfo *pZCLClusterInfo
);
#endif /* _ZCL_ALARM_H */
