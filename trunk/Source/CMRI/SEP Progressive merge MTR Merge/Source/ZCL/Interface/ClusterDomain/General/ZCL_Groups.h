/*********************************************************************
 *
 *                 ZCL Groups Cluster Header File
 *
 *********************************************************************
 * FileName:        ZCL_Groups.h
 * Dependencies:
 * Processor:       PIC18 / PIC24 / PIC32
 * Complier:        MCC18 v3.00 or higher
 *                  MCC30 v2.05 or higher
 *                  MCC32 v2.05 or higher
 * Company:         Microchip Technology, Inc.
 *
 * Software License Agreement
 *
 * Copyright © 2004-2007 Microchip Technology Inc.  All rights reserved.
 *
 * Microchip licenses to you the right to use, copy and distribute Software
 * only when embedded on a Microchip microcontroller or digital signal
 * controller and used with a Microchip radio frequency transceiver, which
 * are integrated into your product or third party product (pursuant to the
 * sublicense terms in the accompanying license agreement).  You may NOT
 * modify or create derivative works of the Software.
 *
 * If you intend to use this Software in the development of a product for
 * sale, you must be a member of the ZigBee Alliance.  For more information,
 * go to www.zigbee.org.
 *
 * You should refer to the license agreement accompanying this Software for
 * additional information regarding your rights and obligations.
 *
 * SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY
 * OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR
 * PURPOSE. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED
 * UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF
 * WARRANTY, OR OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR
 * EXPENSES INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT,
 * PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
 * THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER
 * SIMILAR COSTS.
 *
 * Author               Date            Comment
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                      03/23/09
 *****************************************************************************/
#ifndef _ZCL_GROUPS_H
#define _ZCL_GROUPS_H
/****************************************************************************
   Includes
 *****************************************************************************/
/* None */

/*****************************************************************************
  Constants and Enumerations
 *****************************************************************************/
/*Groups cluster Identifier as defined by ZCL specification*/
#define ZCL_GROUPS_CLUSTER                0x0004

/*Groups Cluster Attribute*/
#define ZCL_GROUPS_NAME_SUPPORT_ATTRIBUTE 0x0000

/*This Macro defines the size of Groups Time Attribute*/
#define SIZE_OF_GROUPS_NAME_SUPPORT_ATTRIBUTE   0x01

/*This indicates the position of ZCL payload in Groups command.*/
#define ZCL_GROUPS_CMD_PAYLOAD_POSITION        	0x03

/*Events handled by the application*/
enum Groups_Cluster_Events
{
    ZCL_Groups_AddGroupEvent              	   	= 0xA0,
    ZCL_Groups_ViewGroupEvent                  	= 0xA1,
    ZCL_Groups_GetGroupMembershipEvent       	= 0xA2,
	ZCL_Groups_RemoveGroupEvent					= 0xA3,
	ZCL_Groups_RemoveAllGroupsEvent				= 0xA4,
	ZCL_Groups_AddGroupIfIdentifyingEvent		= 0xA5,
	ZCL_Groups_AddGroupResponseEvent			= 0xA6,
    ZCL_Groups_ViewGroupResponseEvent           = 0xA7,
    ZCL_Groups_GetGroupMembershipResponseEvent  = 0xA8,
    ZCL_Groups_RemoveGroupResponseEvent  		= 0xA9
};

/*Commands generated by Client Side of the GroupsCluster*/
enum Groups_Generated_Commands
{
    ZCL_Groups_AddGroupCmd              	   	= 0x00,
    ZCL_Groups_ViewGroupCmd                  	= 0x01,
    ZCL_Groups_GetGroupMembershipCmd       		= 0x02,
	ZCL_Groups_RemoveGroupCmd					= 0x03,
	ZCL_Groups_RemoveAllGroupsCmd				= 0x04,
	ZCL_Groups_AddGroupIfIdentifyingCmd			= 0x05
};
/*Commands Received by Client Side of the GroupsCluster*/
enum Groups_Received_Commands
{
    ZCL_Groups_AddGroupResponseCmd           	= 0x00,
    ZCL_Groups_ViewGroupResponseCmd           	= 0x01,
    ZCL_Groups_GetGroupMembershipResponseCmd  	= 0x02,
	ZCL_Groups_RemoveGroupResponseCmd			= 0x03
};

/*****************************************************************************
 Customizable Macros
 *****************************************************************************/
 /* None */

 /*****************************************************************************
   Variable definitions
 *****************************************************************************/
  /* None */

/*****************************************************************************
                            Data Structures
 *****************************************************************************/
/*Stucture for Groups Cluster's Attributes*/
typedef struct __attribute__((packed,aligned(1))) _ZCL_GroupsClusterAttributes
{
    BYTE  nameSupport;
}ZCL_GroupsClusterAttributes;

typedef struct __attribute__((packed,aligned(1))) _ZCL_Groups_AddGroupCmdPayload
{
    WORD groupId;
	BYTE groupName[16];
}ZCL_Groups_AddGroupCmdPayload;

typedef struct __attribute__((packed,aligned(1))) _ZCL_Groups_ViewGroupCmdPayload
{
    WORD groupId;
}ZCL_Groups_ViewGroupCmdPayload;

typedef struct __attribute__((packed,aligned(1))) _ZCL_Groups_GetGroupMembershipCmdPayload
{
    BYTE groupCount;
	WORD groupList[1];
}ZCL_Groups_GetGroupMembershipCmdPayload;

typedef struct __attribute__((packed,aligned(1))) _ZCL_Groups_RemoveGroupCmdPayload
{
    WORD groupId;
}ZCL_Groups_RemoveGroupCmdPayload;

typedef struct __attribute__((packed,aligned(1))) _ZCL_Groups_AddGroupIfIdentifyingCmdPayload
{
    WORD groupId;
	BYTE groupName[16];
}ZCL_Groups_AddGroupIfIdentifyingCmdPayload;


/*****************************************************************************
   Variable definitions
 *****************************************************************************/
extern ROM ZCL_ClusterDefinition zcl_GroupsClusterServerDefinition;
extern ROM ZCL_ClusterDefinition zcl_GroupsClusterClientDefinition;

extern ROM ZCL_ClusterInfo zcl_GroupsClusterServerInfo;
extern ROM ZCL_ClusterInfo zcl_GroupsClusterClientInfo;

/*****************************************************************************
  Function Prototypes
 *****************************************************************************/

/******************************************************************************
 * Function:        BYTE ZCL_HandleGroupsClusterCommand
 *                  (
 *                      BYTE endPointId,
 *                      BYTE asduLength,
 *                      BYTE* pReceivedAsdu,
 *                      BYTE* pResponseAsduStartLocation,
 *                      ZCL_ActionHandler* pActionHandler,
 *                      ROM ZCL_ClusterInfo* pZCLClusterInfo
 *                  );
 *
 * PreCondition:    None
 *
 * Input:           endPointId  - EndPoint on which the GroupsCluster command
 *                                 needs to be processed.
 *                  asduLength - Asdu Length of the recevied frame.
 *                  pReceivedAsdu - This point to the actual data received.
 *                                  This consists of ZCL header and Payload.
 *                  pZCLClusterInfo - Pointer pointing to the GroupsClusterinfo
 *
 * Output:          pResponseAsduStartLocation - Pointer pointing to the start
 *                                               location of asdu for which the
 *                                               response frame needs to be
 *                                               created
*                  pActionHandler -  This is used to notify the application
*                                    that a response frame is generated or not.
*                                    It also holds the information of the type
*                                    event to be handled by the application
*                                    and  has the  payload of the recevied
*                                    data.
 * Return :         Returns the length of the response frame created
 * Side Effects:    None
 *
 * Overview:        This function is called when a Groups Cluster command
 *                  is received.
 *                  This function process the Groups Cluster commands and
 *                  notifies the application about the action to be taken.
 * Note:            None
 *****************************************************************************/
BYTE ZCL_HandleGroupsClusterCommand
(
    BYTE endPointId,
    BYTE asduLength,
    BYTE* pReceivedAsdu,
    BYTE* pResponseAsduStartLocation,
    ZCL_ActionHandler *pActionHandler,
    ROM ZCL_ClusterInfo *pZCLClusterInfo
);

/******************************************************************************
 *	Function:   	BYTE ZCL_Callback_HandleGroupCmds
 *					(
 *    					BYTE endPointId,
 *    					BYTE* pReceivedAsdu,
 *   					BYTE* pResponsePayloadStartLocation
 *					)
 *
 * PreCondition:    None
 *
 * Input:           endPointId  - EndPoint on which the Groups Cluster command needs
 *                                 to be processed.
 *                  pReceivedAsdu - This point to the actual data received.
 *                                  This consists of ZCL header and Payload.
 *                  pZCLClusterInfo - Pointer pointing to the Groups Cluster info
 *
 * Output:          pResponseAsduStartLocation - Pointer pointing to the start
 *                                               location of asdu payload for which the
 *                                               response payload needs to be created
 * Return :         Returns the length of the payload of response frame created
 * Side Effects:    None
 *
 * Overview:        This function is called when a Groups Cluster command
 *                  is received with client to srever direction.
 *                  This function process the Groups Cluster commands and 
 *                  builds the rseponse payload if required .
 *****************************************************************************/
BYTE ZCL_Callback_HandleGroupCmds
(
    BYTE endPointId,
    BYTE* pReceivedAsdu,
    BYTE* pResponsePayloadStartLocation
);

#endif      /*_ZCL_GROUPS_H*/
