/*********************************************************************
 *
 *                  Demand Response And Load Control Header File
 *
 *********************************************************************
 * FileName:        ZCL_DRLC.h
 * Dependencies:
 * Processor:       PIC18 / PIC24 / PIC32
 * Complier:        MCC18 v3.00 or higher
 *                  MCC30 v2.05 or higher
 *                  MCC32 v2.05 or higher
 * Company:         Microchip Technology, Inc.
 *
 * Software License Agreement
 *
 * Copyright © 2004-2007 Microchip Technology Inc.  All rights reserved.
 *
 * Microchip licenses to you the right to use, copy and distribute Software
 * only when embedded on a Microchip microcontroller or digital signal
 * controller and used with a Microchip radio frequency transceiver, which
 * are integrated into your product or third party product (pursuant to the
 * sublicense terms in the accompanying license agreement).  You may NOT
 * modify or create derivative works of the Software.
 *
 * If you intend to use this Software in the development of a product for
 * sale, you must be a member of the ZigBee Alliance.  For more information,
 * go to www.zigbee.org.
 *
 * You should refer to the license agreement accompanying this Software for
 * additional information regarding your rights and obligations.
 *
 * SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY
 * OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR
 * PURPOSE. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED
 * UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF
 * WARRANTY, OR OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR
 * EXPENSES INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT,
 * PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
 * THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER
 * SIMILAR COSTS.
 *
 * Author               Date            Comment
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                      08/04/09
 *****************************************************************************/
#ifndef _ZCL_DRLC_H
#define _ZCL_DRLC_H
/****************************************************************************
   Includes
 *****************************************************************************/
/* None */

/*****************************************************************************
  Constants and Enumerations
 *****************************************************************************/
/* DRLC cluster Identifier as defined by SE specification */
#define ZCL_DRLC_CLUSTER                            0x0701

/* DRLC Cluster Client Attributes */
#define ZCL_DRLC_UTILITY_ENROLEMENT_GROUP           0x0000
#define ZCL_DRLC_START_RANDOMIZE_MINUTES            0x0001
#define ZCL_DRLC_STOP_RANDOMIZE_MINUTES             0x0002
#define ZCL_DRLC_DEVICE_CLASS_VALUE                 0x0003

#define ZCL_DRLC_MAX_DEVICE_CLASS_SUPPORTED         0x0b
#define START_TIME_RANDOMIZATION                    0x01
#define END_TIME_RANDOMIZATION                      0x02
#define CANCEL_CONTROL_RANDOMIZATION                0x01
#define OPT_IN                                      FALSE
#define OPT_OUT                                     TRUE

/*enumerations for events for DRLC cluster*/
enum DRLC_Cluster_Events
{
    ZCL_DRLC_LoadControlEvent                       = 0x70,
    ZCL_DRLC_CancelLoadControlEvent                 = 0x71,
    ZCL_DRLC_CancelAllLoadControlEvents             = 0x72,
    ZCL_DRLC_GetScheduledEvents                     = 0x73,
    ZCL_DRLC_ReportEventStatusEvent                 = 0x74
};
/*Commands generated by Server Side of the DRLC Cluster*/
enum DRLC_Server_Generated_Commands
{
    ZCL_LoadControlEventCmd                         = 0x00,
    ZCL_CancelLoadControlEventCmd                   = 0x01,
    ZCL_CancelAllLoadControlEventCmds               = 0x02
};

/*Commands generated by Client Side of the DRLC Cluster*/
enum DRLC_Client_Generated_Commands
{
    ZCL_ReportEventStatusCmd                        = 0x00,
    ZCL_GetScheduledEventCmd                        = 0x01
};

/*Enum for Event status */
enum DRLC_Event_Status_Values
{
    EventCommandRecieved                            = 0x01,
    EventStarted                                    = 0x02,
    EventCompleted                                  = 0x03,
    EventOptOut                                     = 0x04,
    EventOptIn                                      = 0x05,
    EventCancelled                                  = 0x06,
    EventSuperseded                                 = 0x07,
    EventPartiallyCompletedOptOut                   = 0x08,
    EventPartiallyCompletedOptIn                    = 0x09,
    EventCompletedNoUserParticipationOptOut         = 0x0a,
    EventRejectedInvalidCancelCommand               = 0xf8,
    EventRejectedInvalidCancelInvalidEffectiveTime  = 0xf9,
    EventRejectedExipired                           = 0xfb,
    EventRejectedInvalidCancelUndefinedEvent        = 0xfd,
    EventRejected                                   = 0xfe
};

enum SignatureType
{
    SigReserved1                                    = 0x00,
    ECDSA                                           = 0x01,
    SigReserved2                                    = 0x02
};

/*****************************************************************************
 Customizable Macros
 *****************************************************************************/
 #define LCE_SUCCESS                                0x00
 #define LCE_FAILURE                                0xFF
 #define SIGNATURE_SIZE                             0x2A
 #define INVALID_SIGNATURE                          0xFF

 /*****************************************************************************
   Variable definitions
 *****************************************************************************/
    /* None */

/*****************************************************************************
                            Data Structures
 *****************************************************************************/
typedef struct __attribute__((packed,aligned(1))) _DRLC_Cluster_Attributes
{
    BYTE utilityEnrolementGroup;
    BYTE startRandomizeEvents;
    BYTE stopRandomizeEvents;
    WORD deviceClassValue;
} DRLC_Cluster_Attributes;

typedef struct __attribute__((packed,aligned(1))) _DRLC_LoadControlEvent
{
    DWORD       issuerEventID;
    WORD        deviceClass;
    BYTE        utilityEnrolementGroup;
    DWORD       startTime;
    WORD        durationInMinutes;
    BYTE        criticalityLevel;
    BYTE        coolingTempOffset;
    BYTE        heatingTempOffset;
    SIGNED_WORD coolingTempSetPoint;
    SIGNED_WORD heatingTempSetPoint;
    SBYTE       avgLoadAdjustmentPercentage;
    BYTE        dutyCycle;
    BYTE        eventControl;
} DRLC_LoadControlEvent;

typedef struct __attribute__((packed,aligned(1))) _DRLC_CancelLoadControlEvent
{
    DWORD       issuerEventID;
    WORD        deviceClass;
    BYTE        utilityEnrolementGroup;
    BYTE        cancelControl;
    DWORD       effectiveTime;

} DRLC_CancelLoadControlEvent;

typedef struct __attribute__((packed,aligned(1))) _DRLC_CancelAllLoadControlEvents
{
   BYTE        cancelControl;

} DRLC_CancelAllLoadControlEvents;

typedef struct  __attribute__((packed,aligned(1))) _DRLC_ReportEventStatus
{
    DWORD       issuerEventID;
    BYTE        eventStatus;
    DWORD       eventStatusTime;
    BYTE        criticalityLevel;
    SIGNED_WORD coolingTempSetPoint;
    SIGNED_WORD heatingTempSetPoint;
    SBYTE       avgLoadAdjustmentPercentage;
    BYTE        dutyCycle;
    BYTE        eventControl;
    BYTE        signatureType;
    BYTE        signature[42];

} DRLC_ReportEventStatus;

typedef struct  __attribute__((packed,aligned(1))) _DRLC_GetScheduledEvents
{
    DWORD startTime;
    BYTE  numOfEvents;
} DRLC_GetScheduledEvents;
/*****************************************************************************
   Variable definitions
 *****************************************************************************/
extern ROM ZCL_ClusterDefinition zcl_DRLCClusterServerDefinition;
extern ROM ZCL_ClusterDefinition zcl_DRLCClusterClientDefinition;

extern ROM ZCL_ClusterInfo zcl_DRLCClusterServerInfo;
extern ROM ZCL_ClusterInfo zcl_DRLCClusterClientInfo;

/*****************************************************************************
  Function Prototypes
 *****************************************************************************/
/******************************************************************************
 * Function:        BYTE ZCL_HandleDRLCClusterCommand
 *                  (
 *                      BYTE endPointId,
 *                      BYTE asduLength,
 *                      BYTE* pReceivedAsdu,
 *                      BYTE* pResponseAsduStartLocation,
 *                      ZCL_ActionHandler* pActionHandler,
 *                      ROM ZCL_ClusterInfo* pZCLClusterInfo
 *                  );
 *
 * PreCondition:    None
 *
 * Input:           endPointId - EndPoint on which the DRLC Cluster command
 *                               needs to be processed
 *                  asduLength - Asdu Length of the recevied frame
 *                  pReceivedAsdu - This point to the actual data received.
 *                                  This consists of ZCL header and Payload.
 *                  pZCLClusterInfo - Pointer pointing to the DRLCClusterInfo
 *
 * Output:          pResponseAsduStartLocation - Pointer pointing to the start
 *                                               location of asdu for which the
 *                                               response frame needs to be created
 *                  pActionHandler -   This is used to notify the application that a
 *                                     response frame is generated or not.
 *                                     It also holds the information of the type event
 *                                     to be handled by the application and has the
 *                                     payload of the recevied data
 *
 * Return :         Returns the length of the response frame created
 *
 * Side Effects:    None
 *
 * Overview:        This function is called when a DRLC Cluster command is received.
 *                  This function process the DRLC Cluster commands and notifies the
 *                  application about the action to be taken.
 *
 * Note:            None
 *****************************************************************************/
BYTE ZCL_HandleDRLCClusterCommand
(
    BYTE endPointId,
    BYTE asduLength,
    BYTE* pReceivedAsdu,
    BYTE* pResponseAsduStartLocation,
    ZCL_ActionHandler *pActionHandler,
    ROM ZCL_ClusterInfo *pZCLClusterInfo
);

/******************************************************************************
 * Function:        BYTE ZCL_CreateReportEventStatusCommand
 *                   (
 *                        BYTE transactionSeqNo,
 *                        DRLC_ReportEventStatus* pReportEventStatus,
 *                        BYTE* pResponseAsduStartLocation
 *                   )
 *
 * PreCondition:    pResponseAsduStartLocation Buffer should be allocated before
 *                  the function called
 *
 * Input:           transactionSeqNo - Transaction Sequence Number that needs
 *                                      to be put in the Publish Price Cmd
 *                  pReportEventStatus - It points to the ReportEventStaus
 *                                       Structure and this structure information
 *                                       is needed for creation of
 *                                       ReportEventStatus Command.
 *
 * Output:          pResponseAsduStartLocation - Specifies the start location
 *                                               from where the ReportEventstatus
 *                                               command needs to be created
 *
 *
 * Return :         It returns the length of report event status command frame.
 *
 * Side Effects:    None
 *
 * Overview:        This function is called by the application when it wants
 *                  to send ReportEventStatusCommand (either upon receipt of
 *                  LoadControlEvent Command or CancelAllLoadControlEvent
 *                  Command or CancelAllLoadControlEvents command by ESP ).
 *                  This function is used to create the Report Event Status
 *                  Command by using the values passed as an argument.
 *
 * Note:            None
 *****************************************************************************/
BYTE ZCL_CreateReportEventStatusCommand
(
     BYTE transactionSeqNo,
     DRLC_ReportEventStatus* pReportEventStatus,
     BYTE* pResponseAsduStartLocation
);


/******************************************************************************
 * Function:        void ZCL_DRLC_CreateLoadControlEventCmd
 *                  (
 *                      BYTE transactionSeqNum,
 *                      BYTE  length,
 *                      BYTE* pResponseAsduStartLocation,
 *                      ZCL_Price_PublishPriceInfo
 *                          *pLoadControlEventCommandPayloadDefaultValue
 *                  );
 *
 * PreCondition:    None
 *
 * Input:           transactionSeqNum - Transaction Sequence Number that needs
 *                                      to be put in the LoadControlEventCmd
 *                  length - Length of the LoadControlEventCmd that needs to
 *                           be created. (Length includes ZCL Header and
 *                           ZCL Payload)
 *                  pLoadControlEventCommandPayloadDefaultValue - Structure pointing
 *                           to the location where Payload for LoadControlEventCmd
 *                           information is present and this information needs to
 *                           be updated in the LoadControlEventCommand Payload.
 *
 * Output:          pResponseAsduStartLocation - Specifies the start location
 *                                               from where the Load Control
 *                                               Event Command needs to be created
 *
 * Return :         None
 *
 * Side Effects:    None
 *
 * Overview:        This function is called by the application when it wants to send
 *                  LoadControlEventCommand(either upon receipt of GetScheduledEventCmd).
 *                  This function is used to create the LoadControlEventCommand  by
 *                  using the values passed as an argument.
 *
 * Note:            None
 *****************************************************************************/
void ZCL_DRLC_CreateLoadControlEventCmd
(
    BYTE transactionSeqNum,
    BYTE  length,
    BYTE* pResponseAsduStartLocation,
    DRLC_LoadControlEvent *pLoadControlEventCommandPayloadDefaultValue
);
#endif      /*_ZCL_DRLC_H*/
